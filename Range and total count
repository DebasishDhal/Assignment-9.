#include<iostream>
using namespace std;
	class node
{
public:
	int data;
	node *parent;
	node *right;
	node *left;
		node()
		{
		data=0;
		parent=NULL;
		right=NULL;
		left=NULL;
		}
};


class tree
{	
	public:
	node *root;
	tree(){								//constructor for tree class.		
		root = NULL;
	      }
	void insert(int x);
	void display(node *root);
	int count(node *temp,int no);
	int range(node *temp,int k1,int k2,int no);
};
void tree::insert(int x)						
	{
	node *temp=new node;						//new node is created.
	temp->data=x;							
	temp->right=NULL;						//initially, the parent,left and right of the new node is set as null.
	temp->left=NULL;	
	temp->parent=NULL;
	node *current=root;						//two node pointers are created to reach the desired position.
	node *parent=NULL;									
		if(root==NULL)						//initiallly if tree is empty.
			{
			root=temp;					//tree got a root as temp.
			}
		else
			{
			while(1)					//the loop continues without any condition.
				{
				parent=current;				//parent is set to current.
					if(current->data>x)		//conditions for sliders to move.
						{
						current=current->left;	
						if(current==NULL)	//if the desired location is obtained.
							{
							temp->parent=parent;//temp's parent is set to the parent.
							parent->left=temp;//parent's left stores temp.
							return;		//function ceases to operate from this point.
							}
						}
					else				//if current->data!>x.
						{
						current=current->right;
						if(current==NULL)
							{
							temp->parent=parent;
							parent->right=temp;
							return;
							}
						}
				}
			}
}
void tree::display(node *temp)
	{
	if(temp==NULL)				//consition for function to break.
	   return;							
	display(temp->left);			//for printing in inorder,  we should print in the below order.
	cout<<temp->data<<" ";
	display(temp->right);
	}
int tree::count(node *temp,int no)		//to count the no. of nodes.
	{
	 if(temp==NULL)				//when a leaf node is encountered, rhe function breaks and return the number.
		{
		return no;
		}
	no=count(temp->left,no);		//calling the function recursively.
        no=no+1;				//for each node, one increment is done in no 
	no=count(temp->right,no);		
return no;					//the number is returned at the end.
	}
int tree::range(node *temp,int k1,int k2,int no)//range function.
	{
		if(temp==NULL)			//the logic is exactly same here as that of count function, but there is a slight modification.
			{			// if and only if the data of the temp lies between two prespecified numbers the increment is done.
			return no;
			}
		no=range(temp->left,k1,k2,no);
		if((temp->data>=k1) && (temp->data<=k2))
		no=no+1;
		no=range(temp->right,k1,k2,no);
	return no;
	}			
int main()
	{
	int k1,k2;
	tree t;
	t.insert(56);
	t.insert(43);
	t.insert(2);
	t.insert(643);
	t.insert(666);
	t.insert(10);
	t.insert(42);
	t.insert(87);
	t.insert(7);
	t.insert(74);
	t.insert(90);
	t.display(t.root);
	cout<<endl;
	cout<<"The total no. of elements in it is "<<t.count(t.root,0)<<endl;
        cout<<"Enter k1 and k2"<<endl;
	cin>>k1>>k2;
	cout<<"The required no. is"<<t.range(t.root,k1,k2,0);
	return 0;
        }
	

			
